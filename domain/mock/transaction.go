// Code generated by MockGen. DO NOT EDIT.
// Source: ./transaction.go

// Package mock is a generated GoMock package.
package mock

import (
	mysql "banking/model/mysql"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	decimal "github.com/shopspring/decimal"
)

// MockITransactionService is a mock of ITransactionService interface.
type MockITransactionService struct {
	ctrl     *gomock.Controller
	recorder *MockITransactionServiceMockRecorder
}

// MockITransactionServiceMockRecorder is the mock recorder for MockITransactionService.
type MockITransactionServiceMockRecorder struct {
	mock *MockITransactionService
}

// NewMockITransactionService creates a new mock instance.
func NewMockITransactionService(ctrl *gomock.Controller) *MockITransactionService {
	mock := &MockITransactionService{ctrl: ctrl}
	mock.recorder = &MockITransactionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITransactionService) EXPECT() *MockITransactionServiceMockRecorder {
	return m.recorder
}

// Deposit mocks base method.
func (m *MockITransactionService) Deposit(ctx context.Context, userID uint, amount decimal.Decimal) (*mysql.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deposit", ctx, userID, amount)
	ret0, _ := ret[0].(*mysql.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deposit indicates an expected call of Deposit.
func (mr *MockITransactionServiceMockRecorder) Deposit(ctx, userID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deposit", reflect.TypeOf((*MockITransactionService)(nil).Deposit), ctx, userID, amount)
}

// Transfer mocks base method.
func (m *MockITransactionService) Transfer(ctx context.Context, fromUserID, toUserID uint, amount decimal.Decimal) (*mysql.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", ctx, fromUserID, toUserID, amount)
	ret0, _ := ret[0].(*mysql.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transfer indicates an expected call of Transfer.
func (mr *MockITransactionServiceMockRecorder) Transfer(ctx, fromUserID, toUserID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockITransactionService)(nil).Transfer), ctx, fromUserID, toUserID, amount)
}

// Withdraw mocks base method.
func (m *MockITransactionService) Withdraw(ctx context.Context, userID uint, amount decimal.Decimal) (*mysql.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", ctx, userID, amount)
	ret0, _ := ret[0].(*mysql.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Withdraw indicates an expected call of Withdraw.
func (mr *MockITransactionServiceMockRecorder) Withdraw(ctx, userID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockITransactionService)(nil).Withdraw), ctx, userID, amount)
}

// MockITransactionCommandRepo is a mock of ITransactionCommandRepo interface.
type MockITransactionCommandRepo struct {
	ctrl     *gomock.Controller
	recorder *MockITransactionCommandRepoMockRecorder
}

// MockITransactionCommandRepoMockRecorder is the mock recorder for MockITransactionCommandRepo.
type MockITransactionCommandRepoMockRecorder struct {
	mock *MockITransactionCommandRepo
}

// NewMockITransactionCommandRepo creates a new mock instance.
func NewMockITransactionCommandRepo(ctrl *gomock.Controller) *MockITransactionCommandRepo {
	mock := &MockITransactionCommandRepo{ctrl: ctrl}
	mock.recorder = &MockITransactionCommandRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITransactionCommandRepo) EXPECT() *MockITransactionCommandRepoMockRecorder {
	return m.recorder
}

// Deposit mocks base method.
func (m *MockITransactionCommandRepo) Deposit(ctx context.Context, userID uint, amount decimal.Decimal) (*mysql.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deposit", ctx, userID, amount)
	ret0, _ := ret[0].(*mysql.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deposit indicates an expected call of Deposit.
func (mr *MockITransactionCommandRepoMockRecorder) Deposit(ctx, userID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deposit", reflect.TypeOf((*MockITransactionCommandRepo)(nil).Deposit), ctx, userID, amount)
}

// Transfer mocks base method.
func (m *MockITransactionCommandRepo) Transfer(ctx context.Context, fromUserID, toUserID uint, amount decimal.Decimal) (*mysql.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", ctx, fromUserID, toUserID, amount)
	ret0, _ := ret[0].(*mysql.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transfer indicates an expected call of Transfer.
func (mr *MockITransactionCommandRepoMockRecorder) Transfer(ctx, fromUserID, toUserID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockITransactionCommandRepo)(nil).Transfer), ctx, fromUserID, toUserID, amount)
}

// Withdraw mocks base method.
func (m *MockITransactionCommandRepo) Withdraw(ctx context.Context, userID uint, amount decimal.Decimal) (*mysql.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", ctx, userID, amount)
	ret0, _ := ret[0].(*mysql.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Withdraw indicates an expected call of Withdraw.
func (mr *MockITransactionCommandRepoMockRecorder) Withdraw(ctx, userID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockITransactionCommandRepo)(nil).Withdraw), ctx, userID, amount)
}
