// Code generated by MockGen. DO NOT EDIT.
// Source: ./user.go

// Package mock is a generated GoMock package.
package mock

import (
	mysql "banking/model/mysql"
	context "context"
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockIUserHandler is a mock of IUserHandler interface.
type MockIUserHandler struct {
	ctrl     *gomock.Controller
	recorder *MockIUserHandlerMockRecorder
}

// MockIUserHandlerMockRecorder is the mock recorder for MockIUserHandler.
type MockIUserHandlerMockRecorder struct {
	mock *MockIUserHandler
}

// NewMockIUserHandler creates a new mock instance.
func NewMockIUserHandler(ctrl *gomock.Controller) *MockIUserHandler {
	mock := &MockIUserHandler{ctrl: ctrl}
	mock.recorder = &MockIUserHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserHandler) EXPECT() *MockIUserHandlerMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockIUserHandler) CreateUser() gin.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser")
	ret0, _ := ret[0].(gin.HandlerFunc)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIUserHandlerMockRecorder) CreateUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIUserHandler)(nil).CreateUser))
}

// GetUser mocks base method.
func (m *MockIUserHandler) GetUser() gin.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser")
	ret0, _ := ret[0].(gin.HandlerFunc)
	return ret0
}

// GetUser indicates an expected call of GetUser.
func (mr *MockIUserHandlerMockRecorder) GetUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockIUserHandler)(nil).GetUser))
}

// GetUsers mocks base method.
func (m *MockIUserHandler) GetUsers() gin.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers")
	ret0, _ := ret[0].(gin.HandlerFunc)
	return ret0
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockIUserHandlerMockRecorder) GetUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockIUserHandler)(nil).GetUsers))
}

// MockIUserService is a mock of IUserService interface.
type MockIUserService struct {
	ctrl     *gomock.Controller
	recorder *MockIUserServiceMockRecorder
}

// MockIUserServiceMockRecorder is the mock recorder for MockIUserService.
type MockIUserServiceMockRecorder struct {
	mock *MockIUserService
}

// NewMockIUserService creates a new mock instance.
func NewMockIUserService(ctrl *gomock.Controller) *MockIUserService {
	mock := &MockIUserService{ctrl: ctrl}
	mock.recorder = &MockIUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserService) EXPECT() *MockIUserServiceMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockIUserService) CreateUser(ctx context.Context, user *mysql.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIUserServiceMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIUserService)(nil).CreateUser), ctx, user)
}

// GetUser mocks base method.
func (m *MockIUserService) GetUser(ctx context.Context, userID uint) (*mysql.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, userID)
	ret0, _ := ret[0].(*mysql.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockIUserServiceMockRecorder) GetUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockIUserService)(nil).GetUser), ctx, userID)
}

// GetUsers mocks base method.
func (m *MockIUserService) GetUsers(ctx context.Context) ([]*mysql.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", ctx)
	ret0, _ := ret[0].([]*mysql.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockIUserServiceMockRecorder) GetUsers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockIUserService)(nil).GetUsers), ctx)
}

// MockIUserQueryRepo is a mock of IUserQueryRepo interface.
type MockIUserQueryRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIUserQueryRepoMockRecorder
}

// MockIUserQueryRepoMockRecorder is the mock recorder for MockIUserQueryRepo.
type MockIUserQueryRepoMockRecorder struct {
	mock *MockIUserQueryRepo
}

// NewMockIUserQueryRepo creates a new mock instance.
func NewMockIUserQueryRepo(ctrl *gomock.Controller) *MockIUserQueryRepo {
	mock := &MockIUserQueryRepo{ctrl: ctrl}
	mock.recorder = &MockIUserQueryRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserQueryRepo) EXPECT() *MockIUserQueryRepoMockRecorder {
	return m.recorder
}

// GetUser mocks base method.
func (m *MockIUserQueryRepo) GetUser(ctx context.Context, userID uint) (*mysql.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, userID)
	ret0, _ := ret[0].(*mysql.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockIUserQueryRepoMockRecorder) GetUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockIUserQueryRepo)(nil).GetUser), ctx, userID)
}

// GetUsers mocks base method.
func (m *MockIUserQueryRepo) GetUsers(ctx context.Context) ([]*mysql.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", ctx)
	ret0, _ := ret[0].([]*mysql.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockIUserQueryRepoMockRecorder) GetUsers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockIUserQueryRepo)(nil).GetUsers), ctx)
}

// MockIUserCommandRepo is a mock of IUserCommandRepo interface.
type MockIUserCommandRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIUserCommandRepoMockRecorder
}

// MockIUserCommandRepoMockRecorder is the mock recorder for MockIUserCommandRepo.
type MockIUserCommandRepoMockRecorder struct {
	mock *MockIUserCommandRepo
}

// NewMockIUserCommandRepo creates a new mock instance.
func NewMockIUserCommandRepo(ctrl *gomock.Controller) *MockIUserCommandRepo {
	mock := &MockIUserCommandRepo{ctrl: ctrl}
	mock.recorder = &MockIUserCommandRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserCommandRepo) EXPECT() *MockIUserCommandRepoMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockIUserCommandRepo) CreateUser(ctx context.Context, user *mysql.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIUserCommandRepoMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIUserCommandRepo)(nil).CreateUser), ctx, user)
}
