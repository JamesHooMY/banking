// Code generated by MockGen. DO NOT EDIT.
// Source: ./apikey.go

// Package mock is a generated GoMock package.
package mock

import (
	mysql "banking/model/mysql"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIAPIKeyService is a mock of IAPIKeyService interface.
type MockIAPIKeyService struct {
	ctrl     *gomock.Controller
	recorder *MockIAPIKeyServiceMockRecorder
}

// MockIAPIKeyServiceMockRecorder is the mock recorder for MockIAPIKeyService.
type MockIAPIKeyServiceMockRecorder struct {
	mock *MockIAPIKeyService
}

// NewMockIAPIKeyService creates a new mock instance.
func NewMockIAPIKeyService(ctrl *gomock.Controller) *MockIAPIKeyService {
	mock := &MockIAPIKeyService{ctrl: ctrl}
	mock.recorder = &MockIAPIKeyServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAPIKeyService) EXPECT() *MockIAPIKeyServiceMockRecorder {
	return m.recorder
}

// CreateAPIKey mocks base method.
func (m *MockIAPIKeyService) CreateAPIKey(ctx context.Context, userID uint) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAPIKey", ctx, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateAPIKey indicates an expected call of CreateAPIKey.
func (mr *MockIAPIKeyServiceMockRecorder) CreateAPIKey(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAPIKey", reflect.TypeOf((*MockIAPIKeyService)(nil).CreateAPIKey), ctx, userID)
}

// DeleteAPIKey mocks base method.
func (m *MockIAPIKeyService) DeleteAPIKey(ctx context.Context, userID uint, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAPIKey", ctx, userID, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAPIKey indicates an expected call of DeleteAPIKey.
func (mr *MockIAPIKeyServiceMockRecorder) DeleteAPIKey(ctx, userID, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAPIKey", reflect.TypeOf((*MockIAPIKeyService)(nil).DeleteAPIKey), ctx, userID, key)
}

// GetAPIKeys mocks base method.
func (m *MockIAPIKeyService) GetAPIKeys(ctx context.Context, userID uint, key string) ([]*mysql.APIKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPIKeys", ctx, userID, key)
	ret0, _ := ret[0].([]*mysql.APIKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIKeys indicates an expected call of GetAPIKeys.
func (mr *MockIAPIKeyServiceMockRecorder) GetAPIKeys(ctx, userID, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIKeys", reflect.TypeOf((*MockIAPIKeyService)(nil).GetAPIKeys), ctx, userID, key)
}

// MockIRedisAPIKeyQueryRepo is a mock of IRedisAPIKeyQueryRepo interface.
type MockIRedisAPIKeyQueryRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIRedisAPIKeyQueryRepoMockRecorder
}

// MockIRedisAPIKeyQueryRepoMockRecorder is the mock recorder for MockIRedisAPIKeyQueryRepo.
type MockIRedisAPIKeyQueryRepoMockRecorder struct {
	mock *MockIRedisAPIKeyQueryRepo
}

// NewMockIRedisAPIKeyQueryRepo creates a new mock instance.
func NewMockIRedisAPIKeyQueryRepo(ctrl *gomock.Controller) *MockIRedisAPIKeyQueryRepo {
	mock := &MockIRedisAPIKeyQueryRepo{ctrl: ctrl}
	mock.recorder = &MockIRedisAPIKeyQueryRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRedisAPIKeyQueryRepo) EXPECT() *MockIRedisAPIKeyQueryRepoMockRecorder {
	return m.recorder
}

// GetRedisAPIKey mocks base method.
func (m *MockIRedisAPIKeyQueryRepo) GetRedisAPIKey(ctx context.Context, userID uint, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRedisAPIKey", ctx, userID, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRedisAPIKey indicates an expected call of GetRedisAPIKey.
func (mr *MockIRedisAPIKeyQueryRepoMockRecorder) GetRedisAPIKey(ctx, userID, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRedisAPIKey", reflect.TypeOf((*MockIRedisAPIKeyQueryRepo)(nil).GetRedisAPIKey), ctx, userID, key)
}

// MockIRedisAPIKeyCommandRepo is a mock of IRedisAPIKeyCommandRepo interface.
type MockIRedisAPIKeyCommandRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIRedisAPIKeyCommandRepoMockRecorder
}

// MockIRedisAPIKeyCommandRepoMockRecorder is the mock recorder for MockIRedisAPIKeyCommandRepo.
type MockIRedisAPIKeyCommandRepoMockRecorder struct {
	mock *MockIRedisAPIKeyCommandRepo
}

// NewMockIRedisAPIKeyCommandRepo creates a new mock instance.
func NewMockIRedisAPIKeyCommandRepo(ctrl *gomock.Controller) *MockIRedisAPIKeyCommandRepo {
	mock := &MockIRedisAPIKeyCommandRepo{ctrl: ctrl}
	mock.recorder = &MockIRedisAPIKeyCommandRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRedisAPIKeyCommandRepo) EXPECT() *MockIRedisAPIKeyCommandRepoMockRecorder {
	return m.recorder
}

// DeleteRedisAPIKey mocks base method.
func (m *MockIRedisAPIKeyCommandRepo) DeleteRedisAPIKey(ctx context.Context, userID uint, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRedisAPIKey", ctx, userID, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRedisAPIKey indicates an expected call of DeleteRedisAPIKey.
func (mr *MockIRedisAPIKeyCommandRepoMockRecorder) DeleteRedisAPIKey(ctx, userID, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRedisAPIKey", reflect.TypeOf((*MockIRedisAPIKeyCommandRepo)(nil).DeleteRedisAPIKey), ctx, userID, key)
}

// SetRedisAPIKey mocks base method.
func (m *MockIRedisAPIKeyCommandRepo) SetRedisAPIKey(ctx context.Context, userID uint, key, secret string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRedisAPIKey", ctx, userID, key, secret)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRedisAPIKey indicates an expected call of SetRedisAPIKey.
func (mr *MockIRedisAPIKeyCommandRepoMockRecorder) SetRedisAPIKey(ctx, userID, key, secret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRedisAPIKey", reflect.TypeOf((*MockIRedisAPIKeyCommandRepo)(nil).SetRedisAPIKey), ctx, userID, key, secret)
}

// MockIAPIKeyQueryRepo is a mock of IAPIKeyQueryRepo interface.
type MockIAPIKeyQueryRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIAPIKeyQueryRepoMockRecorder
}

// MockIAPIKeyQueryRepoMockRecorder is the mock recorder for MockIAPIKeyQueryRepo.
type MockIAPIKeyQueryRepoMockRecorder struct {
	mock *MockIAPIKeyQueryRepo
}

// NewMockIAPIKeyQueryRepo creates a new mock instance.
func NewMockIAPIKeyQueryRepo(ctrl *gomock.Controller) *MockIAPIKeyQueryRepo {
	mock := &MockIAPIKeyQueryRepo{ctrl: ctrl}
	mock.recorder = &MockIAPIKeyQueryRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAPIKeyQueryRepo) EXPECT() *MockIAPIKeyQueryRepoMockRecorder {
	return m.recorder
}

// GetAPIKeys mocks base method.
func (m *MockIAPIKeyQueryRepo) GetAPIKeys(ctx context.Context, userID uint, key string) ([]*mysql.APIKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPIKeys", ctx, userID, key)
	ret0, _ := ret[0].([]*mysql.APIKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIKeys indicates an expected call of GetAPIKeys.
func (mr *MockIAPIKeyQueryRepoMockRecorder) GetAPIKeys(ctx, userID, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIKeys", reflect.TypeOf((*MockIAPIKeyQueryRepo)(nil).GetAPIKeys), ctx, userID, key)
}

// MockIAPIKeyCommandRepo is a mock of IAPIKeyCommandRepo interface.
type MockIAPIKeyCommandRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIAPIKeyCommandRepoMockRecorder
}

// MockIAPIKeyCommandRepoMockRecorder is the mock recorder for MockIAPIKeyCommandRepo.
type MockIAPIKeyCommandRepoMockRecorder struct {
	mock *MockIAPIKeyCommandRepo
}

// NewMockIAPIKeyCommandRepo creates a new mock instance.
func NewMockIAPIKeyCommandRepo(ctrl *gomock.Controller) *MockIAPIKeyCommandRepo {
	mock := &MockIAPIKeyCommandRepo{ctrl: ctrl}
	mock.recorder = &MockIAPIKeyCommandRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAPIKeyCommandRepo) EXPECT() *MockIAPIKeyCommandRepoMockRecorder {
	return m.recorder
}

// CreateAPIKey mocks base method.
func (m *MockIAPIKeyCommandRepo) CreateAPIKey(ctx context.Context, userID uint, key, secret string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAPIKey", ctx, userID, key, secret)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAPIKey indicates an expected call of CreateAPIKey.
func (mr *MockIAPIKeyCommandRepoMockRecorder) CreateAPIKey(ctx, userID, key, secret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAPIKey", reflect.TypeOf((*MockIAPIKeyCommandRepo)(nil).CreateAPIKey), ctx, userID, key, secret)
}

// DeleteAPIKey mocks base method.
func (m *MockIAPIKeyCommandRepo) DeleteAPIKey(ctx context.Context, userID uint, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAPIKey", ctx, userID, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAPIKey indicates an expected call of DeleteAPIKey.
func (mr *MockIAPIKeyCommandRepoMockRecorder) DeleteAPIKey(ctx, userID, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAPIKey", reflect.TypeOf((*MockIAPIKeyCommandRepo)(nil).DeleteAPIKey), ctx, userID, key)
}
