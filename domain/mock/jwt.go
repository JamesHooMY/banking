// Code generated by MockGen. DO NOT EDIT.
// Source: ./jwt.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIRedisJWTCommandRepo is a mock of IRedisJWTCommandRepo interface.
type MockIRedisJWTCommandRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIRedisJWTCommandRepoMockRecorder
}

// MockIRedisJWTCommandRepoMockRecorder is the mock recorder for MockIRedisJWTCommandRepo.
type MockIRedisJWTCommandRepoMockRecorder struct {
	mock *MockIRedisJWTCommandRepo
}

// NewMockIRedisJWTCommandRepo creates a new mock instance.
func NewMockIRedisJWTCommandRepo(ctrl *gomock.Controller) *MockIRedisJWTCommandRepo {
	mock := &MockIRedisJWTCommandRepo{ctrl: ctrl}
	mock.recorder = &MockIRedisJWTCommandRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRedisJWTCommandRepo) EXPECT() *MockIRedisJWTCommandRepoMockRecorder {
	return m.recorder
}

// DeleteRedisJWT mocks base method.
func (m *MockIRedisJWTCommandRepo) DeleteRedisJWT(ctx context.Context, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRedisJWT", ctx, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRedisJWT indicates an expected call of DeleteRedisJWT.
func (mr *MockIRedisJWTCommandRepoMockRecorder) DeleteRedisJWT(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRedisJWT", reflect.TypeOf((*MockIRedisJWTCommandRepo)(nil).DeleteRedisJWT), ctx, email)
}

// SetRedisJWT mocks base method.
func (m *MockIRedisJWTCommandRepo) SetRedisJWT(ctx context.Context, email, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRedisJWT", ctx, email, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRedisJWT indicates an expected call of SetRedisJWT.
func (mr *MockIRedisJWTCommandRepoMockRecorder) SetRedisJWT(ctx, email, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRedisJWT", reflect.TypeOf((*MockIRedisJWTCommandRepo)(nil).SetRedisJWT), ctx, email, token)
}

// MockIRedisJWTQueryRepo is a mock of IRedisJWTQueryRepo interface.
type MockIRedisJWTQueryRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIRedisJWTQueryRepoMockRecorder
}

// MockIRedisJWTQueryRepoMockRecorder is the mock recorder for MockIRedisJWTQueryRepo.
type MockIRedisJWTQueryRepoMockRecorder struct {
	mock *MockIRedisJWTQueryRepo
}

// NewMockIRedisJWTQueryRepo creates a new mock instance.
func NewMockIRedisJWTQueryRepo(ctrl *gomock.Controller) *MockIRedisJWTQueryRepo {
	mock := &MockIRedisJWTQueryRepo{ctrl: ctrl}
	mock.recorder = &MockIRedisJWTQueryRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRedisJWTQueryRepo) EXPECT() *MockIRedisJWTQueryRepoMockRecorder {
	return m.recorder
}

// GetRedisJWT mocks base method.
func (m *MockIRedisJWTQueryRepo) GetRedisJWT(ctx context.Context, email string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRedisJWT", ctx, email)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRedisJWT indicates an expected call of GetRedisJWT.
func (mr *MockIRedisJWTQueryRepoMockRecorder) GetRedisJWT(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRedisJWT", reflect.TypeOf((*MockIRedisJWTQueryRepo)(nil).GetRedisJWT), ctx, email)
}
